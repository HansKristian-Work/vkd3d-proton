/*
 * * Copyright 2021 NVIDIA Corporation
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */
import "vkd3d_d3d12.idl";
import "vkd3d_vk_includes.h";

[
    uuid(11ea7a1a-0f6a-49bf-b612-3e30f8e201dd),
    object,
    local,
    pointer_default(unique)
]
interface ID3D12DeviceExt : IUnknown
{
    HRESULT GetVulkanHandles(VkInstance *vk_instance, VkPhysicalDevice *vk_physical_device, VkDevice *vk_device);
    BOOL GetExtensionSupport(D3D12_VK_EXTENSION extension);
    HRESULT CreateCubinComputeShaderWithName(const void *cubin_data, UINT32 cubin_size, UINT32 block_x, UINT32 block_y, UINT32 block_z, const char *shader_name, D3D12_CUBIN_DATA_HANDLE **handle);
    HRESULT DestroyCubinComputeShader(D3D12_CUBIN_DATA_HANDLE *handle);
    HRESULT GetCudaTextureObject(D3D12_CPU_DESCRIPTOR_HANDLE srv_handle, D3D12_CPU_DESCRIPTOR_HANDLE sampler_handle, UINT32 *cuda_texture_handle);
    HRESULT GetCudaSurfaceObject(D3D12_CPU_DESCRIPTOR_HANDLE uav_handle, UINT32 *cuda_surface_handle);
    HRESULT CaptureUAVInfo(D3D12_UAV_INFO *uav_info);
}

[
    uuid(39da4e09-bd1c-4198-9fae-86bbe3be41fd),
    object,
    local,
    pointer_default(unique)
]
interface ID3D12DXVKInteropDevice : IUnknown
{
    HRESULT GetDXGIAdapter(REFIID iid, void **object);
    HRESULT GetInstanceExtensions(UINT *extension_count, const char **extensions);
    HRESULT GetDeviceExtensions(UINT *extension_count, const char **extensions);
    HRESULT GetDeviceFeatures(const VkPhysicalDeviceFeatures2 **features);
    HRESULT GetVulkanHandles(VkInstance *vk_instance, VkPhysicalDevice *vk_physical_device, VkDevice *vk_device);
    HRESULT GetVulkanQueueInfo(ID3D12CommandQueue *queue, VkQueue *vk_queue, UINT32 *vk_queue_family);
    void GetVulkanImageLayout(ID3D12Resource *resource, D3D12_RESOURCE_STATES state, VkImageLayout *vk_layout);
    HRESULT GetVulkanResourceInfo(ID3D12Resource *resource, UINT64 *vk_handle, UINT64 *buffer_offset);
    HRESULT LockCommandQueue(ID3D12CommandQueue *queue);
    HRESULT UnlockCommandQueue(ID3D12CommandQueue *queue);
}
